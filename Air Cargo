
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")

library(tidyverse)
library(caret)
library(dplyr)

#  Source of data
#  https://www.transtats.bts.gov/DL_SelectFields.asp?gnoyr_VQ=FIL&QO_fu146_anzr=Nv4%20Pn44vr45

#  Unzip Flights data and Passenger data and save it in single data frame

 raw_data <-
            list.files(pattern = "*.zip") %>% 
            map_df(~read_csv(.))

 
 #  Find NA
 sapply(raw_data, function(x) sum(is.na(x)))
 
 #  We can see column 37 is only NA so we will remove it from data.

 raw_data = select(raw_data,-37)
 
 sapply(raw_data, function(x) sum(is.na(x)))
 
 
 #  After one more check we have got 358 rows at most with NA data, so we can remove it as well.
 raw_data <- raw_data[rowSums(is.na(raw_data)) == 0,]
 
 
 

 

raw_data = raw_data %>%
  group_by(AIRLINE_ID) %>%
  mutate(total_for_airline = sum(FREIGHT)) %>%
  filter(total_for_airline > 0 )




 

 biggest_freight_2019 <- aggregate(raw_data$FREIGHT, by=list(Airline=raw_data$CARRIER_NAME), FUN=sum) %>%
   arrange(x) %>%
   head(100)
 

 
 
 
 
 
 
 
 # Split data 
 
 
 # Validation set will be 10% of MovieLens data
 
 test_index <- createDataPartition(y = raw_data$FREIGHT, times = 1, p = 0.5, list = FALSE)
 train_set <- raw_data[-test_index,]
 temp <- raw_data[test_index,]
 
 # Make sure userId and movieId in validation set are also in edx set
 test_set <- temp %>% 
   semi_join(raw_data, by = "AIRLINE_ID") %>%
   semi_join(raw_data, by = "ORIGIN_CITY_NAME")
 
 # Add rows removed from validation set back into edx set
 removed <- anti_join(temp, test_set)
 train_set <- rbind(train_set, removed)
 
 rm( test_index, raw_data, removed)
 
 
 
 #Define RMSE function
 RMSE <- function(true_ratings, predicted_ratings)
 {sqrt(mean((true_ratings - predicted_ratings)^2))}
 
 SI <- function(true_ratings, predicted_ratings)
 {sqrt(mean((true_ratings - predicted_ratings)^2))/mean(true_ratings)}
 
 
 # ggfsfsdfdfdfdfs
ggplot(data = train_set) + geom_bar(mapping  = aes(x=DISTANCE_GROUP*500,fill = CLASS))+
  xlab("Flight Distance (miles)") +
  ylab("Percentage of flights ") 



#Passengers by year

passengers_by_year <- aggregate(train_set$PASSENGERS, by=list(Year=train_set$YEAR), FUN=sum)

  ggplot(data = passengers_by_year, aes(x=Year, y=x)) +
  geom_line()

  #Freight by year

  freight_by_year <- aggregate(train_set$FREIGHT, by=list(Year=train_set$YEAR), FUN=sum)
  
  ggplot(data = freight_by_year, aes(x=Year, y=x)) +
    geom_line()
  
  #Mail by year
  mail_by_year <- aggregate(train_set$MAIL, by=list(Year=train_set$YEAR), FUN=sum)
  
  ggplot(data = mail_by_year, aes(x=Year, y=x)) +
    geom_line()
  
  
  
#  Biggest freight airlines in 2019
  
  biggest_passenger_2019 <- aggregate(train_set$FREIGHT, by=list(Airline=train_set$CARRIER_NAME), FUN=sum,train_set$YEAR == "2019") %>%
   arrange(-x) %>%
    head(10)
  

  #Most popular passenger routes
  

     most_popular <- train_set[c("ORIGIN_CITY_NAME","DEST_CITY_NAME")]
  
      most_popular<-  most_popular %>% group_by(ORIGIN_CITY_NAME,DEST_CITY_NAME) %>%
         summarize(Count = n()) 
       
      most_popular <-most_popular[order(-most_popular$Count),] 
      
     most_popular <- head(most_popular,30)
     
     
     


     #First model
     
     average_passenger <- mean(train_set$FREIGHT)
     
     RMSE(test_set$FREIGHT, average_passenger)
     SI(test_set$FREIGHT, average_passenger)
     #Second model
     
     average_per_airline <- train_set %>%
       group_by(AIRLINE_ID) %>%
       summarize(airline = mean(FREIGHT - average_passenger))
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       mutate(pred = average_passenger + airline   ) %>%
       .$pred
     
     
     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted)

     #Third Model - Distance group
     
     average_with_distance_group <- train_set %>%
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       group_by(DISTANCE_GROUP) %>%
       summarize( distance = mean(average_passenger - airline))
     
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
       mutate(pred = average_passenger + airline + distance  ) %>%
       .$pred
     
     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted)
     #Fourth Model - Class
     
     average_with_class <- train_set %>%
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
       group_by(CLASS) %>%
       summarize( class = mean(average_passenger - airline -  distance))
     
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       mutate(pred = average_passenger +airline + distance + class  ) %>%
       .$pred
     

     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted)
     
     
     
     #Fifth Model - Year
     
     average_with_year <- train_set %>%
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       group_by(YEAR) %>%
       summarize( year = mean(average_passenger - airline - distance - class))
     
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       mutate(pred = average_passenger + airline + distance + class + year  ) %>%
       .$pred
     
     
     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted)
     
     # Sixth Month
     
     
     average_with_month <- train_set %>%
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       group_by(MONTH) %>%
       summarize( month = mean(average_passenger - airline - distance - class- year))
     
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       left_join(average_with_month , by='MONTH') %>%
       mutate(pred = average_passenger + airline + distance + class + year+month  ) %>%
       .$pred
     
     
     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted)
     
     
     
     # dfc
     

     average_with_group <- train_set %>%
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       left_join(average_with_month , by='MONTH') %>%
       group_by(CARRIER_GROUP) %>%
       summarize( group = mean(average_passenger - airline - distance - class- year - month))
     
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       left_join(average_with_month , by='MONTH') %>%
       left_join(average_with_group , by='CARRIER_GROUP') %>%
       mutate(pred = average_passenger + airline + distance + class + year+month+ group ) %>%
       .$pred
     
     
     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted)
     
     
     
     
     average_with_state <- train_set %>%
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       left_join(average_with_month , by='MONTH') %>%
       left_join(average_with_group , by='CARRIER_GROUP') %>%
       group_by(ORIGIN_STATE_ABR) %>%
       summarize( or_state = mean(average_passenger - airline - distance - class- year - month+group))
     
     
     
     predicted <- test_set %>% 
       left_join(average_per_airline, by='AIRLINE_ID') %>%
       left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
       left_join(average_with_class , by='CLASS') %>%
       left_join(average_with_year , by='YEAR') %>%
       left_join(average_with_month , by='MONTH') %>%
       left_join(average_with_group , by='CARRIER_GROUP') %>%
       left_join(average_with_state , by='ORIGIN_STATE_ABR') %>%
       mutate(pred = average_passenger + airline + distance + class + year+month+ group+or_state ) %>%
       .$pred
     
     
     RMSE(test_set$FREIGHT,predicted)
     SI(test_set$FREIGHT, predicted) 
     
     
     
     
     
     

  
     
     
     
     print("Calculations with Lambda")
     lambdas <- seq(0, 100000, 1000)
     sixth_model <- sapply(lambdas, function(l){
       
       # Counter for showing calculations progress
       counter <- (l/100)
       
       cat(paste("\rProgress",counter," %"))
       Sys.sleep(1)
       
       
       #Calculation

       
       average_per_airline <- train_set %>%
         group_by(AIRLINE_ID) %>%
         summarize(airline = sum(FREIGHT - average_passenger)/(n()+l))
       
       
       average_with_distance_group <- train_set %>%
         left_join(average_per_airline, by='AIRLINE_ID') %>%
         group_by(DISTANCE_GROUP) %>%
         summarize( distance = sum(average_passenger - airline)/(n()+l))
       
       average_with_class <- train_set %>%
         left_join(average_per_airline, by='AIRLINE_ID') %>%
         left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
         group_by(CLASS) %>%
         summarize( class = sum(average_passenger - airline - distance)/(n()+l))
       
       average_with_year <- train_set %>%
         left_join(average_per_airline, by='AIRLINE_ID') %>%
         left_join(average_with_distance_group, by='DISTANCE_GROUP') %>%
         left_join(average_with_class , by='CLASS') %>%
         group_by(YEAR) %>%
         summarize( year = sum(average_passenger - airline - distance - class)/(n()+l)) 
       
       
       
       
      
       
       #Saving outcome
       
       predicted <- test_set %>% 
         left_join(average_per_airline, by='AIRLINE_ID') %>%
         left_join(average_with_distance_group , by='DISTANCE_GROUP') %>%
         left_join(average_with_class , by='CLASS') %>%
         left_join(average_with_year , by='YEAR') %>%
         mutate(pred = average_passenger + airline + distance + class + year  ) %>%
         .$pred
       
   
       #Model test
       return(RMSE( test_set$FREIGHT,predicted))
       
       print("Finished Lambda Calculations")
     })
     
     cat("Minimum Final RMSE for Sixth Model",min(sixth_model))
     
     #Defining lambda for best RMSE result
     lambda <- lambdas[which.min(sixth_model)]
     lambda
     

     # Plot showing how RMSE is dependent from lambda
     qplot(lambdas, sixth_model) +
       xlab("Lambda") +
       ylab("RMSE") + 
       ggtitle(paste0("RMSE per Lambda - minimum with Lambda = ",lambda)  )
     
     
     
     
     
     

     
  
