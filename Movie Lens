##########################################################
# Create edx set, validation set (final hold-out test set)
##########################################################

# Note: this process could take a couple of minutes

if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")

library(tidyverse)
library(caret)
library(data.table)

# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip

dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)

ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
                 col.names = c("userId", "movieId", "rating", "timestamp"))

movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")

# if using R 3.6 or earlier:
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),
                                           title = as.character(title),
                                           genres = as.character(genres))




movielens <- left_join(ratings, movies, by = "movieId")

# Validation set will be 10% of MovieLens data
set.seed(1, sample.kind="Rounding") # if using R 3.5 or earlier, use `set.seed(1)`
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]

# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>% 
  semi_join(edx, by = "movieId") %>%
  semi_join(edx, by = "userId")

# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)

rm(dl, ratings, movies, test_index, temp, movielens, removed)

#Define RMSE function
RMSE <- function(true_ratings, predicted_ratings)
                {sqrt(mean((true_ratings - predicted_ratings)^2))}

#First model

      #First model being mean of all ratings
      all_average <- mean(edx$rating)
      all_average
      

      
#Second Model
      
      #Second model being mean rating minus ....
      all_average_with_b <- edx %>% 
        group_by(movieId) %>%  
        summarize(b = mean(rating - all_average)) 
      


      
#Third Model      
      
      
      rating_with_user <- edx %>% 
        left_join(all_average_with_b, by='movieId') %>%
        group_by(userId) %>%
        summarize(c = mean(rating - all_average - b))
      
      

     
     
  
  
      
      #Fourth Model     
      
           edx <- edx %>%
                 mutate(genres = as.factor(genres))
      
      
           rating_with_genres <- edx %>% 
             left_join(all_average_with_b, by='movieId') %>%
             left_join(rating_with_user, by='userId') %>%
             group_by(genres) %>%
             summarize(d = mean(rating - all_average - b - c))
           
          
           
           ##### with year
           
           edx <- mutate(edx,year=substr(title,nchar(title)-5,nchar(title)-1))
           validation <- mutate(validation,year=substr(title,nchar(title)-5,nchar(title)-1))
     
           rating_with_year <- edx %>% 
             left_join(all_average_with_b, by='movieId') %>%
             left_join(rating_with_user, by='userId') %>%
             left_join(rating_with_genres, by='genres') %>%
             group_by(year) %>%
             summarize(e = mean(rating - all_average - b - c-d))
           
           
           year_predicted <- validation %>% 
             left_join(all_average_with_b, by='movieId') %>%
             left_join(rating_with_user, by='userId') %>%
             left_join(rating_with_genres, by='genres') %>%
             left_join(rating_with_year, by='year') %>%
             mutate(pred = all_average + b + c + d + e) %>%
             .$pred
          
          rm(all_average_with_b,rating_with_genres,rating_with_user,rating_with_year)           
           
           
           

           model_gen_rmse <- RMSE(year_predicted, validation$rating)
           model_gen_rmse
           
